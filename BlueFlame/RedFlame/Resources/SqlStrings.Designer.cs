//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.1433
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RedFlame.Resources {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SqlStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SqlStrings() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RedFlame.Resources.SqlStrings", typeof(SqlStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT u.displayname, u.user, u.domain, l.file,l.time, m.text, l.rc
        ///FROM imageslog l
        ///LEFT JOIN user u USING(user,domain)
        ///LEFT JOIN message m USING(message)
        ///ORDER BY time ähnelt.
        /// </summary>
        internal static string GetAllImageLogs {
            get {
                return ResourceManager.GetString("GetAllImageLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT l.time, u.displayname, u.user, u.domain, l.file, l.productid,  l.licensekey, m.text
        ///FROM licenselog l
        ///LEFT JOIN user u USING(user,domain)
        ///LEFT JOIN message m USING(message)
        ///ORDER BY TIME ähnelt.
        /// </summary>
        internal static string GetAllLicenseLogs {
            get {
                return ResourceManager.GetString("GetAllLicenseLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT p.file,p.productid,p.productname,p.productdescription, i.path, i.ext,i.date,i.lang, i.dvdmedia FROM products p, images i WHERE p.file=i.file ORDER BY productname, file, date, productdescription, productid ähnelt.
        /// </summary>
        internal static string GetAllProducts {
            get {
                return ResourceManager.GetString("GetAllProducts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT u.displayname,u.user,u.domain,l.time, m.text
        ///FROM userlog l
        ///LEFT JOIN message m USING(message)
        ///LEFT JOIN user u USING(user,domain) ORDER BY time ähnelt.
        /// </summary>
        internal static string GetAllUserLogs {
            get {
                return ResourceManager.GetString("GetAllUserLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT user, domain, displayname FROM user ORDER BY DOMAIN, user, displayname ähnelt.
        /// </summary>
        internal static string GetAllUsers {
            get {
                return ResourceManager.GetString("GetAllUsers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT DISTINCT i.file, p.productname, p.productid, i.lang
        ///FROM license l
        ///LEFT JOIN images i using(file)
        ///LEFT JOIN products p using(file, productid)
        ///GROUP BY file, productid
        ///ORDER BY p.productname, file, productid ähnelt.
        /// </summary>
        internal static string GetFilteredProducts {
            get {
                return ResourceManager.GetString("GetFilteredProducts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT DISTINCT u.user, u.domain, u.displayname, licensekey
        ///FROM LICENSELOG l
        ///LEFT JOIN user u USING(user, domain)
        ///WHERE l.message = &apos;3000&apos;
        ///GROUP BY u.user
        ///ORDER BY domain, user, displayname ähnelt.
        /// </summary>
        internal static string GetFilteredUsers {
            get {
                return ResourceManager.GetString("GetFilteredUsers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT MAX(time) AS lastdate, COUNT(*) AS count FROM licenselog WHERE message=&apos;3000&apos;
        ///AND licensekey= ?key
        ///AND productid = ?id
        ///AND file= ?file
        ///GROUP BY licensekey, productid, file ähnelt.
        /// </summary>
        internal static string GetLastDistributionDate {
            get {
                return ResourceManager.GetString("GetLastDistributionDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT licensekey, distributed, multi, insertdate
        ///FROM license
        ///WHERE licensekey = ?key AND file = ?file AND productid = ?productid ähnelt.
        /// </summary>
        internal static string GetLicenseInfo {
            get {
                return ResourceManager.GetString("GetLicenseInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT licensekey, user, domain, multi, distributed, time
        ///FROM license l
        ///LEFT OUTER JOIN licenselog USING(licensekey)
        ///WHERE l.file = ?file
        ///AND l.productid = ?productid
        ///GROUP BY licensekey
        ///ORDER BY domain IS NULL, domain ASC, user ASC, licensekey ASC ähnelt.
        /// </summary>
        internal static string GetLicensesByProduct {
            get {
                return ResourceManager.GetString("GetLicensesByProduct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT productid, productname, productdescription FROM products WHERE file = ?fileId ähnelt.
        /// </summary>
        internal static string GetProductsByFile {
            get {
                return ResourceManager.GetString("GetProductsByFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT p.productname, p.productdescription, p.productid, p.file
        ///FROM license l
        ///LEFT JOIN products p ON(p.file = l.file AND p.productid = l.productid)
        ///WHERE lcase(l.licensekey) = ?key
        ///ORDER BY p.productname ähnelt.
        /// </summary>
        internal static string GetProductsByLicense {
            get {
                return ResourceManager.GetString("GetProductsByLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT p.productname, p.productid, p.file, i.lang, l.time, l.licensekey
        ///FROM LICENSELOG l
        ///LEFT JOIN products p USING(file,productid)
        ///LEFT JOIN images i USING(file)
        ///WHERE l.user = ?user
        ///AND l.domain = ?domain
        ///AND l.message = &apos;3000&apos; ähnelt.
        /// </summary>
        internal static string GetProductsByUser {
            get {
                return ResourceManager.GetString("GetProductsByUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT CONCAT(path,&apos;\\\\&apos;, file,&apos;.&apos;,ext) AS filename, lang, date, dvdmedia
        ///FROM images
        ///WHERE file = ?fileId LIMIT 1 ähnelt.
        /// </summary>
        internal static string GetSingleFile {
            get {
                return ResourceManager.GetString("GetSingleFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT productname, productdescription, licensefromfile, licensefromproductid FROM products
        ///WHERE file = ?file
        ///AND productid = ?productid LIMIT 1 ähnelt.
        /// </summary>
        internal static string GetSingleProduct {
            get {
                return ResourceManager.GetString("GetSingleProduct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT llog.user, llog.domain, u.displayname, llog.time
        ///FROM licenselog llog
        ///LEFT JOIN user u ON(u.user = llog.user AND u.domain = llog.domain)
        ///WHERE llog.message = &apos;3000&apos;
        ///AND llog.licensekey = ?key
        ///AND llog.productid= ?productId
        ///AND llog.file =  ?fileId
        ///GROUP BY u.user, u.domain ähnelt.
        /// </summary>
        internal static string GetUserByLicense {
            get {
                return ResourceManager.GetString("GetUserByLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DELETE FROM IMAGESLOG ähnelt.
        /// </summary>
        internal static string RemoveAllImageLogs {
            get {
                return ResourceManager.GetString("RemoveAllImageLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DELETE FROM USERLOG ähnelt.
        /// </summary>
        internal static string RemoveAllUserLogs {
            get {
                return ResourceManager.GetString("RemoveAllUserLogs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DELETE FROM LICENSELOG WHERE user = ?user AND file = ?file and productid = ?productid ähnelt.
        /// </summary>
        internal static string RemoveUserLicense {
            get {
                return ResourceManager.GetString("RemoveUserLicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT log.user, log.domain, l.licensekey, l.insertdate, l.multi, l.distributed
        ///FROM license l
        ///LEFT JOIN licenselog log USING(licensekey)
        ///WHERE licensekey LIKE ?keyword
        ///ORDER BY log.domain IS NULL, log.domain ASC, log.user ASC, l.licensekey ASC ähnelt.
        /// </summary>
        internal static string SearchLicenseByProduct {
            get {
                return ResourceManager.GetString("SearchLicenseByProduct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT p.productname, l.productid, l.file, i.lang, licensekey, insertdate, l.multi, l.distributed
        ///FROM license l
        ///LEFT JOIN products p USING(file,productid)
        ///LEFT JOIN images i USING(file)
        ///WHERE l.licensekey LIKE ?keyword ähnelt.
        /// </summary>
        internal static string SearchLicenseByUser {
            get {
                return ResourceManager.GetString("SearchLicenseByUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT CONCAT(i.path,&apos;\\\\&apos;, i.file,&apos;.&apos;,i.ext) AS filename,p.file,p.productid,p.productname,p.productdescription, i.path, i.ext,i.date,i.lang, i.dvdmedia
        ///FROM products p
        ///LEFT JOIN images i ON (i.file = p.file)
        ///WHERE p.productname LIKE ?keyword OR p.file like ?keyword  OR p.productdescription LIKE ?keyword OR i.lang LIKE ?keyword OR i.path LIKE ?keyword
        ///ORDER BY p.productname, p.productid, i.file, i.path, i.date, i.lang, i.dvdmedia ähnelt.
        /// </summary>
        internal static string SearchProduct {
            get {
                return ResourceManager.GetString("SearchProduct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT DISTINCT i.file, p.productname, p.productid, i.lang
        ///FROM license l
        ///LEFT JOIN images i using(file)
        ///LEFT JOIN products p using(file, productid)
        ///WHERE productname like ?keyword
        ///AND file like ?keyword
        ///GROUP BY file, productid
        ///ORDER BY p.productname, file, productid ähnelt.
        /// </summary>
        internal static string SearchProductsWithLicenses {
            get {
                return ResourceManager.GetString("SearchProductsWithLicenses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SELECT user, domain, displayname FROM user
        ///WHERE user LIKE ?keyword
        ///OR domain LIKE ?keyword
        ///OR displayname LIKE ?keyword
        ///ORDER BY domain, user, displayname ähnelt.
        /// </summary>
        internal static string SearchUser {
            get {
                return ResourceManager.GetString("SearchUser", resourceCulture);
            }
        }
    }
}
